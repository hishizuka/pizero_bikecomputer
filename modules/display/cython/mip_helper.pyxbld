import os
import platform


def get_arch_info():
    machine = platform.machine()

    # Try to get CPU info from /proc/cpuinfo
    cpuinfo = ""
    if os.path.exists("/proc/cpuinfo"):
        with open("/proc/cpuinfo") as f:
            cpuinfo = f.read()

    if "ARMv6" in cpuinfo:
        cpuinfo = "pi0"
    elif cpuinfo in ["Cortex-A53", "Raspberry Pi 3", "Raspberry Pi Zero 2"]:
        cpuinfo = "pi3"
    elif cpuinfo in ["Cortex-A72", "Raspberry Pi 4"]:
        cpuinfo = "pi4"
    elif cpuinfo in ["Cortex-A76", "Raspberry Pi 5"]:
        cpuinfo = "pi5"

    if not cpuinfo:
        cpuinfo = machine

    return cpuinfo, machine


def make_ext(modname, pyxfilename):
    from distutils.extension import Extension
    import numpy

    cpu, machine = get_arch_info()
    extra_compile_args = ['-O3', '-std=c++17']
    define_macros = [('NPY_NO_DEPRECATED_API', 'NPY_1_7_API_VERSION'), ('NO_USE_SPI_CE0', '1')]
    #define_macros = [('NPY_NO_DEPRECATED_API', 'NPY_1_7_API_VERSION')]
    DUSE_NEON = [('NEON', '1')]
    DUSE_NEON_64 = [('NEON_64', '1')]

    if cpu == "pi0":
        extra_compile_args += ['-mcpu=arm1176jzf-s', '-mfpu=vfp', '-mfloat-abi=hard']
    elif cpu == "pi3":
        extra_compile_args += ['-mcpu=cortex-a53']
        define_macros += DUSE_NEON
    elif cpu == "pi4":
        extra_compile_args += ['-mcpu=cortex-a72']
        define_macros += DUSE_NEON
    elif cpu == "pi5":
        extra_compile_args += ['-mcpu=cortex-a76']
        define_macros += DUSE_NEON
    elif cpu == "arm64":
        extra_compile_args += ['-march=armv8']
        define_macros += DUSE_NEON
    
    if machine in ["arm64", "aarch64"]:
        define_macros += DUSE_NEON_64

    ext = Extension(
        name = modname,
        #sources=[pyxfilename, 'mip_display.cpp'],
        sources=[pyxfilename, 'mip_display.cpp', 'riemersma_dithering.cpp'],
        extra_compile_args = extra_compile_args,
        language='c++',
        include_dirs = ['modules/display/cython', numpy.get_include()],
        extra_link_args = ['-lpigpiod_if2'],
        define_macros = define_macros,
    )
    return ext

#for print
def make_setup_args():
    return dict(script_args=['--verbose'])